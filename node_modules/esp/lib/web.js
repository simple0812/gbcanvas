// Generated by CoffeeScript 1.5.0
(function() {
  var Context, Pattern, Router, Server, file, fs, kup, path, qs, url, util;

  fs = require('fs');

  qs = require('querystring');

  url = require('url');

  path = require('path');

  kup = require('./coffeefilter');

  util = require('util');

  file = new (require('node-static')).Server('./public');

  exports.Server = Server = (function() {

    function Server(router) {
      var _this = this;
      this.router = router;
      this.server = require('http').createServer();
      this.server.on('request', function(request, response) {
        var content;
        try {
          return _this.router.route(request, response);
        } catch (error) {
          content = error.message;
          response.writeHead(500, {
            'Content-Length': Buffer.byteLength(content, 'utf-8')
          });
          response.write(content, 'utf-8');
          return response.end();
        }
      });
    }

    Server.prototype.run = function(port) {
      this.server.listen(port);
      return console.log("listening on " + port);
    };

    return Server;

  })();

  exports.Router = Router = (function() {

    function Router(callback) {
      if (callback != null) {
        callback.apply(this);
      }
    }

    Router.prototype.include = function(callback) {
      return callback.apply(this);
    };

    Router.prototype.get = function(pattern, callback, option) {
      return this.push('GET', pattern, callback, option);
    };

    Router.prototype.post = function(pattern, callback, option) {
      return this.push('POST', pattern, callback, option);
    };

    Router.prototype.put = function(pattern, callback, option) {
      return this.push('PUT', pattern, callback, option);
    };

    Router.prototype["delete"] = function(pattern, callback, option) {
      return this.push('DELETE', pattern, callback, option);
    };

    Router.prototype.head = function(pattern, callback, option) {
      return this.push('HEAD', pattern, callback, option);
    };

    Router.prototype.push = function(method, pattern, callback, option) {
      var _ref;
      this.patterns = (_ref = this.patterns) != null ? _ref : [];
      return this.patterns.push(new Pattern(method, pattern, callback, option));
    };

    Router.prototype.route = function(request, response) {
      var args, ctx, each, pattern, _i, _len, _ref, _ref1;
      util.log("request " + request.method + " " + request.httpVersion + " " + request.url);
      _ref = this.patterns.slice(0).reverse();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        each = _ref[_i];
        if (each.test(request)) {
          pattern = each;
          break;
        }
      }
      if (pattern != null) {
        args = pattern.exec(request);
        ctx = new Context(request, response, args);
        if (this.auth != null) {
          ctx.user = this.auth.apply(ctx);
        }
        if ((_ref1 = pattern.option) != null ? _ref1["public"] : void 0) {
          return pattern.callback.apply(ctx);
        } else {
          if ((this.auth != null) && (ctx.user == null) && request.url !== this.login) {
            return this.redirect_login(response);
          } else {
            return pattern.callback.apply(ctx);
          }
        }
      } else {
        return file.serve(request, response);
      }
    };

    Router.prototype.redirect_login = function(response) {
      if (this.login != null) {
        response.writeHead(302, {
          'Location': this.login
        });
        return response.end();
      }
    };

    return Router;

  })();

  Pattern = (function() {

    function Pattern(method, input, callback, option) {
      var p,
        _this = this;
      this.method = method;
      this.input = input;
      this.callback = callback;
      this.option = option;
      if (this.input instanceof RegExp) {
        this.rule = this.input;
        return;
      }
      p = Array.isArray(this.input) ? '(' + this.input.join('|') + ')' : this.input;
      p = p.replace(/:([^/])+/g, function($) {
        var _ref;
        _this.keys = (_ref = _this.keys) != null ? _ref : [];
        _this.keys.push($.slice(1));
        return "([^/]+)";
      });
      this.rule = new RegExp("^" + p + "/?$");
    }

    Pattern.prototype.test = function(request) {
      return this.method === request.method && this.rule.test(url.parse(request.url).pathname);
    };

    Pattern.prototype.exec = function(request) {
      var i, m, result, _i, _ref;
      if (this.keys == null) {
        return {};
      }
      m = this.rule.exec(url.parse(request.url).pathname);
      result = {};
      for (i = _i = 0, _ref = this.keys.length; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        result[this.keys[i]] = decodeURIComponent(m[i + 1]);
      }
      return result;
    };

    return Pattern;

  })();

  Context = (function() {

    function Context(request, response, args) {
      var cookie, k, v;
      this.request = request;
      this.response = response;
      for (k in args) {
        v = args[k];
        this[k] = v;
      }
      this.query = url.parse(this.request.url, true).query;
      if (this.request.headers.cookie != null) {
        cookie = this.request.headers.cookie;
        cookie = qs.parse(cookie, ';');
        this.cookie = {};
        for (k in cookie) {
          v = cookie[k];
          this.cookie[k.trim()] = v;
        }
      }
    }

    Context.prototype.html = function(content, code) {
      if (code == null) {
        code = 200;
      }
      return this.write('text/html', content, code);
    };

    Context.prototype.text = function(content) {
      return this.write('text/plain', content);
    };

    Context.prototype.json = function(data, indent) {
      if (indent == null) {
        indent = null;
      }
      return this.write('application/json; charset=utf-8', JSON.stringify(data, null, indent));
    };

    Context.prototype.j = function(data, indent) {
      if (indent == null) {
        indent = null;
      }
      return this.write('application/json; charset=utf-8', JSON.stringify(data, (function(k, v) {
        if (k.slice(0, 1) === '_') {
          return void 0;
        } else {
          return v;
        }
      }), indent));
    };

    Context.prototype.redirect = function(uri) {
      this.response.writeHead(302, {
        'Location': uri
      });
      return this.response.end();
    };

    Context.prototype.write = function(mime, content, code) {
      if (code == null) {
        code = 200;
      }
      this.response.writeHead(code, {
        'Content-Type': mime,
        'Content-Length': Buffer.byteLength(content, 'utf-8')
      });
      this.response.write(content, 'utf-8');
      return this.response.end();
    };

    Context.prototype.view = function(file, model) {
      var _this = this;
      model = model || {};
      if (this.user != null) {
        model.user = this.user.name;
      }
      if (path.extname(file).length === 0) {
        file = "" + file + ".coffee";
      }
      return fs.readFile(path.join('./view/', file), 'utf-8', function(err, content) {
        var ext;
        if (err == null) {
          ext = path.extname(file).slice(1);
          if ((_this[ext] != null) && ext !== 'html') {
            try {
              return _this[ext](content, model);
            } catch (error) {
              return _this.html(error.message);
            }
          } else {
            return _this.html(content);
          }
        } else {
          return _this.html('Not found', 404);
        }
      });
    };

    Context.prototype.setCookie = function(arg) {
      var k, v;
      if (arg != null) {
        return this.response.setHeader("Set-Cookie", (function() {
          var _results;
          _results = [];
          for (k in arg) {
            v = arg[k];
            _results.push("" + k + "=" + v);
          }
          return _results;
        })());
      }
    };

    Context.prototype.clearCookie = function() {
      var k;
      return this.response.setHeader("Set-Cookie", (function() {
        var _results;
        _results = [];
        for (k in this.cookie) {
          _results.push("" + k + "=''");
        }
        return _results;
      }).call(this));
    };

    Context.prototype.coffee = function(template, model) {
      if (model == null) {
        model = {};
      }
      model.settings = {
        views: './view',
        format: false
      };
      return this.html(kup.render(template, model));
    };

    return Context;

  })();

}).call(this);
