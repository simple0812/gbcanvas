// Generated by CoffeeScript 1.5.0
(function() {
  var Model, Store, events, fs, guid, moment, util,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  guid = require('guid');

  fs = require('fs');

  events = require('events');

  util = require('util');

  moment = require('moment');

  moment.lang('zh-cn');

  exports.Store = Store = (function() {
    var _instance;

    _instance = null;

    Store.instance = function() {
      return _instance = _instance || new Store;
    };

    function Store() {
      this.load = __bind(this.load, this);      this.index = {};
      this.types = {};
      try {
        this.sqlite = require('sqlite3').verbose();
        this.db = new this.sqlite.Database('data');
        this.db.exec("CREATE TABLE IF NOT EXISTS [document] (\n  [seq] INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n  [id] GUID NOT NULL,\n  [createdAt] DATETIME DEFAULT (strftime('%Y-%m-%d %H:%M:%f', 'now', 'localtime')),\n  [updatedAt] DATETIME DEFAULT (strftime('%Y-%m-%d %H:%M:%f', 'now', 'localtime')),\n  [type] TEXT NOT NULL,\n  [payload] TEXT NOT NULL);\nCREATE INDEX IF NOT EXISTS [id_index] on [document]([id]);");
      } catch (error) {
        console.log('require sqlite3 failed.');
      }
    }

    Store.prototype.push = function(target) {
      if ((target.id != null) && target.id in this.index) {
        return;
      }
      return this.onCreate(target);
    };

    Store.prototype.listen = function(target) {
      var _this = this;
      target.on('save', function(e) {
        return _this.onSave(target);
      });
      return target.on('delete', function(e) {
        return _this.onDelete(target);
      });
    };

    Store.prototype.onCreate = function(target) {
      var args, type, _ref;
      type = target.constructor.name;
      if (!(((_ref = target.id) != null ? _ref.length : void 0) > 0)) {
        target.id = guid.create().value;
        target.createdAt = moment();
        target.updatedAt = target.createdAt;
        args = [target.id, type, this.json(target)];
        this.db.run('INSERT INTO [document] ([id],[type],[payload]) VALUES (?,?,?);', args);
      }
      this.index[target.id] = target;
      this[type] = this[type] || {};
      this[type][target.id] = target;
      this.listen(target);
      return target;
    };

    Store.prototype.onSave = function(target) {
      var args;
      target.updatedAt = moment();
      args = [this.json(target), target.updatedAt.format('YYYY-MM-DD HH:mm:ss.SSS'), target.id];
      this.db.run('UPDATE [document] SET [payload]=?, [updatedAt]=? WHERE [id]=?;', args);
      return target;
    };

    Store.prototype.onDelete = function(target) {
      var _this = this;
      return this.db.run('DELETE FROM [document] WHERE [id]=?;', target.id, function() {
        var type;
        delete _this.index[target.id];
        type = target.constructor.name;
        delete _this[type][target.id];
        return target.id = null;
      });
    };

    Store.prototype.load = function(callback) {
      var _this = this;
      if (this.db == null) {
        return;
      }
      return this.db.each('SELECT * FROM [document] ORDER BY [seq]', function(err, row) {
        var k, p, v, _ref;
        try {
          p = new _this.types[row.type]({});
          p.__po__ = {};
          delete row.payload.id;
          _ref = JSON.parse(row.payload);
          for (k in _ref) {
            v = _ref[k];
            p.__po__[k] = v;
          }
          p.id = row.id;
          p.createdAt = moment(row.createdAt);
          p.updatedAt = moment(row.updatedAt);
          p.type = row.type;
          return _this.push(p);
        } catch (error) {
          return console.log('load: ', error.message);
        }
      }, function(err) {
        var content, each, id, k, link, name, value, _ref, _ref1;
        _ref = _this.index;
        for (id in _ref) {
          each = _ref[id];
          _ref1 = each.__po__;
          for (name in _ref1) {
            value = _ref1[name];
            if (name !== '_links') {
              each[name] = value;
            }
            if (name === '_links') {
              for (link in value) {
                content = value[link];
                if (typeof content === 'string') {
                  each[link] = _this.index[content];
                } else if (content instanceof Array) {
                  each[link] = (function() {
                    var _i, _len, _results;
                    _results = [];
                    for (_i = 0, _len = content.length; _i < _len; _i++) {
                      k = content[_i];
                      _results.push(this.index[k]);
                    }
                    return _results;
                  }).call(_this);
                }
              }
            }
          }
        }
        if (callback != null) {
          return callback();
        }
      });
    };

    Store.prototype.json = function(target) {
      var links, name, p, po, value;
      po = {};
      po.id = target.id;
      links = {};
      for (name in target) {
        value = target[name];
        if (__indexOf.call(target.fields, name) < 0) {
          continue;
        }
        if (value instanceof Model) {
          links[name] = value.id;
        } else if (value instanceof Array && value.length > 0 && value[0] instanceof Model) {
          links[name] = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = value.length; _i < _len; _i++) {
              p = value[_i];
              _results.push(p.id);
            }
            return _results;
          })();
        } else {
          po[name] = value;
        }
      }
      if (Object.keys(links).length > 0) {
        po._links = links;
      }
      return JSON.stringify(po, null, 2);
    };

    return Store;

  })();

  exports.Model = Model = (function(_super) {

    __extends(Model, _super);

    function Model() {
      Object.defineProperty(this, '_fromNow', {
        enumerable: true,
        get: function() {
          return this.createdAt.fromNow();
        }
      });
    }

    Model.create = function() {
      return Store.instance().push((function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(this, arguments, function(){}));
    };

    Model.persist = function() {
      var fields;
      fields = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      Store.instance().types[this.name] = this;
      return this.prototype.fields = fields;
    };

    Model.prototype.save = function() {
      return this.emit('save', this);
    };

    Model.prototype["delete"] = function() {
      return this.emit('delete', this);
    };

    Model.find = function(condition) {
      var k, v, _ref, _ref1, _results, _results1;
      if (condition != null) {
        if (condition instanceof Function) {
          _ref = Store.instance()[this.name];
          _results = [];
          for (k in _ref) {
            v = _ref[k];
            if (condition(v)) {
              _results.push(v);
            }
          }
          return _results;
        } else if (typeof condition === 'string') {
          return Store.instance().index[condition];
        }
      } else {
        if (Store.instance()[this.name] != null) {
          _ref1 = Store.instance()[this.name];
          _results1 = [];
          for (k in _ref1) {
            v = _ref1[k];
            _results1.push(v);
          }
          return _results1;
        }
      }
    };

    Model.findone = function(condition) {
      var k, result, v, _ref;
      if (condition != null) {
        result = null;
        _ref = Store.instance()[this.name];
        for (k in _ref) {
          v = _ref[k];
          if (condition(v)) {
            result = v;
            break;
          }
        }
        return result;
      }
    };

    return Model;

  })(events.EventEmitter);

}).call(this);
